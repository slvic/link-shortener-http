// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sinkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SinkServiceClient is the client API for SinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SinkServiceClient interface {
	Sink(ctx context.Context, in *SinkRequest, opts ...grpc.CallOption) (*SinkResponse, error)
	Unsink(ctx context.Context, in *UnsinkRequest, opts ...grpc.CallOption) (*UnsinkResponse, error)
}

type sinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSinkServiceClient(cc grpc.ClientConnInterface) SinkServiceClient {
	return &sinkServiceClient{cc}
}

func (c *sinkServiceClient) Sink(ctx context.Context, in *SinkRequest, opts ...grpc.CallOption) (*SinkResponse, error) {
	out := new(SinkResponse)
	err := c.cc.Invoke(ctx, "/sink.v1.SinkService/Sink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinkServiceClient) Unsink(ctx context.Context, in *UnsinkRequest, opts ...grpc.CallOption) (*UnsinkResponse, error) {
	out := new(UnsinkResponse)
	err := c.cc.Invoke(ctx, "/sink.v1.SinkService/Unsink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SinkServiceServer is the server API for SinkService service.
// All implementations should embed UnimplementedSinkServiceServer
// for forward compatibility
type SinkServiceServer interface {
	Sink(context.Context, *SinkRequest) (*SinkResponse, error)
	Unsink(context.Context, *UnsinkRequest) (*UnsinkResponse, error)
}

// UnimplementedSinkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSinkServiceServer struct {
}

func (UnimplementedSinkServiceServer) Sink(context.Context, *SinkRequest) (*SinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sink not implemented")
}
func (UnimplementedSinkServiceServer) Unsink(context.Context, *UnsinkRequest) (*UnsinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsink not implemented")
}

// UnsafeSinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SinkServiceServer will
// result in compilation errors.
type UnsafeSinkServiceServer interface {
	mustEmbedUnimplementedSinkServiceServer()
}

func RegisterSinkServiceServer(s grpc.ServiceRegistrar, srv SinkServiceServer) {
	s.RegisterService(&SinkService_ServiceDesc, srv)
}

func _SinkService_Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkServiceServer).Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sink.v1.SinkService/Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkServiceServer).Sink(ctx, req.(*SinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinkService_Unsink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkServiceServer).Unsink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sink.v1.SinkService/Unsink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkServiceServer).Unsink(ctx, req.(*UnsinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SinkService_ServiceDesc is the grpc.ServiceDesc for SinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sink.v1.SinkService",
	HandlerType: (*SinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sink",
			Handler:    _SinkService_Sink_Handler,
		},
		{
			MethodName: "Unsink",
			Handler:    _SinkService_Unsink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sink/v1/sink.proto",
}
